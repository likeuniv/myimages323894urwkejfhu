Stream API
=================
Introduced in Java 8, the Stream API is used to process collections of objects. 
A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.
 
The features of Java stream are –
 
A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
 
Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. 
Terminal operations mark the end of the stream and return the result.
 
 
Stream Creation
There are many ways to create a stream instance of different sources. 
Once created, the instance will not modify its source, therefore allowing the creation of multiple instances from a single source.
 
Empty Stream : We should use the empty() method in case of the creation of an empty stream:
 
Stream<String> streamEmpty = Stream.empty();
We often use the empty() method upon creation to avoid returning null for streams with no element:
 
We can also create a stream of any type of Collection (Collection, List, Set):
 
Collection<String> collection = Arrays.asList("a", "b", "c");
Stream<String> streamOfCollection = collection.stream();
 
Stream of Array
An array can also be the source of a stream:  
Stream<String> streamOfArray = Stream.of("a", "b", "c");
 
We can also create a stream out of an existing array or of part of an array:
 
String[] arr = new String[]{"a", "b", "c"};
Stream<String> streamOfArrayFull = Arrays.stream(arr);
Stream<String> streamOfArrayPart = Arrays.stream(arr, 1, 3);
 
 
Stream of Primitives
Java 8 offers the possibility to create streams out of three primitive types: int, long and double. 
As Stream<T> is a generic interface, and there is no way to use primitives as a type parameter with generics, three new special interfaces were created: IntStream, LongStream, DoubleStream.
 
IntStream intStream = IntStream.range(1, 3);
LongStream longStream = LongStream.rangeClosed(1, 3);
 
*The result doesn't include the last parameter, it is just an upper bound of the sequence.
 
Stream of String
We can also use String as a source for creating a stream with the help of the chars() method of the String class. 
Since there is no interface for CharStream in JDK, we use the IntStream to represent a stream of chars instead.
 
IntStream streamOfChars = "abc".chars();
 
Stream of File
Furthermore, Java NIO class Files allows us to generate a Stream<String> of a text file through the lines() method. 
Every line of the text becomes an element of the stream:
 
Path path = Paths.get("C:\\file.txt");
Stream<String> streamOfStrings = Files.lines(path);
Stream<String> streamWithCharset =  Files.lines(path, Charset.forName("UTF-8"));
 
 
Intermediate Operations:
------------------
map: The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.
List number = Arrays.asList(2,3,4,5);
List square = number.stream().map(x->x*x).collect(Collectors.toList());
 
filter: The filter method is used to select elements as per the Predicate passed as argument.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());
 
sorted: The sorted method is used to sort the stream.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().sorted().collect(Collectors.toList());
 
Terminal Operations:
 
collect: The collect method is used to return the result of the intermediate operations performed on the stream.
List number = Arrays.asList(2,3,4,5,3);
Set square = number.stream().map(x->x*x).collect(Collectors.toSet());
 
forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));
 
reduce: The reduce method is used to reduce the elements of a stream to a single value.
The reduce method takes a BinaryOperator as a parameter.
 
List number = Arrays.asList(2,3,4,5);
int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);

--------------------------------------------------------------------------------------------
s.length()
s.charAt()
s.indexOf()
s.substring(start)
s.subString(start,end)
s.split()
s.replace(old,new)
s.toUpperCase()
s.toLowerCase()

sb.append()
sb.capacity()
sb.reverse()
sb.insert(index,stringToBeInserted)
sb.delete(start,end)

class MyImmutable {
	int x;
	MyImmutable(int x){
		this.x=x;
	} 

	public MyImmutable change(int x){
		if(this.x==x){return x;}else{return new MyImmutable;}
	}
	main()
}

----------------------------------------------------------------------

input:
5
101,Raj,23
102,Rajesh,34
103,Ranjit,33
104,Monoj,34
109,Raka,23
 
Output:
Youngest Person: 
Raj
Raka

import java.util.Scanner;

public class Main
{
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int noOfInput = scan.nextInt();
		String[] persons = new String[noOfInput];
		for (int i=0; i< noOfInput; i++) {
		    persons[i] = scan.next();
		}
		
		int minAge = Integer.MAX_VALUE;
		
		for(String person : persons){
		    String[] items = person.split(",");
		    if(Integer.parseInt(items[2]) < minAge){
		        minAge = Integer.parseInt(items[2]);
		    }
		}
		
		for(String person : persons){
		    String[] items = person.split(",");
		    if(Integer.parseInt(items[2])==minAge){
		        System.out.println(items[1]);
		    }
		}
	}
}



=== problem-2:
input:
3
121
231
232
 
output:
Total palindrome numbers : 3
 
input:
3
12
21
23
 
output:
Sorry! There is no palindrome numbers

import java.util.Scanner;

public class Main
{
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int noOfInput = scan.nextInt();
		int[] inputs = new int[noOfInput];
		 for(int i=0; i < noOfInput; i++){
		     inputs[i] = scan.nextInt();
		 }
		 
		 int count=0;
		 
		 for(int input : inputs){
		     if(checkPalindrome(input)){
		         count++;
		     }
		 }
		 
		 if(count > 0){
		     System.out.println("Total palindrome numbers : "+count);
		 }else{
		     System.out.println("Sorry!!! No palindromes present.");
		 }
		
	}
	
	public static boolean checkPalindrome(int value){
	    int temp = value;
	    int sum = 0;
	    while(value>0){
	        sum = (sum*10)+(value%10);
	        value/=10;
	    }
	    
	    return (sum==temp)?true:false;
	}
}

input :
a2c3b1
 
output:
aacccb
 
input:
a2c3b0
 
output: 
Improper data
 
Note: each char and digit will be in a single format only. digit 0 not allowed.

Scanner sc = new Scanner(System.in);
String word = sc.next(); //a2c3b1
String myword="";
 
for(int i=0; i<word.length();i=i+2){
     char x = word.charAt(i); //a/c/b
     char y = word.charAt(i+1);//2/3/1
     if(y=='0') {
        System.out.println("Improper data");
        System.exit(0);
     }
     for(int j=1; j<=y-'0'; j++)  //'2'-'0'=2 / '1'-'0'=1
       myword=myword+x; //aacccb
 
 
     System.out.println(myword);
}

------------------------------------------------------------------------------------

import java.util.*;
import java.util.stream.*;

public class Main
{
	public static void main(String[] args) {
		ArrayList<Integer> al = new ArrayList<>();
		al.add(2);
		al.add(33);
		al.add(56);
		al.add(21);
		al.add(34);
		al.add(97);
		al.add(87);
		
		System.out.println(al);
		
		List<Integer> l = al.stream().filter(x->x%2==0).collect(Collectors.toList());
		System.out.println(l);
		
		List<Integer> l2 = al.stream().map(x->x+5).collect(Collectors.toList());
		System.out.println(l2);
		
		
	}
}


LocalDate date = LocalDate.now();
	    LocalTime time = LocalTime.now();
	    LocalDateTime dt = LocalDateTime.now();
	    System.out.println(date);
	    System.out.printf("%d-%d-%d\n",date.getDayOfMonth(),date.getMonthValue(),date.getYear());//int type
	    System.out.println(time);
	    System.out.printf("%d:%d:%d:%d\n", time.getHour(),time.getMinute(),time.getSecond(),time.getNano());//int type
	    System.out.println(dt);
	    System.out.printf("%d-%d-%d\t%d:%d:%d:%d\n", dt.getDayOfMonth(),dt.getMonthValue(),dt.getYear(),dt.getHour(),dt.getMinute(),dt.getSecond(),dt.getNano());
	    //LocalDateTime date1 = LocalDateTime.of(yy,MM,dd,hh,mm,ss,ns);
	    //dt.plusMonths(6);
	    //dt.minusMonths(6);
	   /* LocalDateTime date1 = LocalDateTime.of(2001,6,8);
	    System.out.println(date1);*/
	    
	    //Period p = Period.between(birth,now);
	    //p.getYears();
	    //p.getMonths();
	    //p.getDays();
	    
	    Year y = Year.of(2001);
	    y.isLeap(); 
	    
	    ZoneId zone = ZoneId.systemDefault();
	    System.out.println(zone);
	    
	    ZoneId zone1 = ZoneId.of("America/Los_Angeles");
	    ZonedDateTime zdt = ZonedDateTime.now();
	    System.out.println(zdt);






Java 8 new features:

--------------------------------------------------------------
